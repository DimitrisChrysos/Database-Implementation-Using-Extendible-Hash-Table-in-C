ΥΣΒΔ - Εργασία 2

Μέλη ομάδας:

- Δημήτριος Χρυσός - 1115202100275
- Αναστάσιος Μουμουλίδης - 1115202100108
- Παναγιώτης Τσελίκας - 1115202100192

Γενικές παραδοχές:

- Έχουμε αρχικοποιήσει το global_depth σε 1
- Στην συνάρτηση HashStatistics, αντί για char * filename περνάμε σαν όρισμα έναν int * indexDesc
- Οι δύο παραπάνω παραδοχές έγιναν ακολουθώντας τις διευκρινήσεις που δόθηκαν σε συζητήσεις στο eclass
από τους υπεύθυνους της εργασίας και μέσω αυτών μας επέτρεψαν να τις υλοποιήσουμε.

Αρχικά, έχουμε υλοποιήσει όλες τις δομές και τις συναρτήσεις όπως ζητούνται από την εκφώνηση,
με τη χρήση των συναρτήσεων του αρχείου bf.h. Σε αυτό το αρχείο θα περιγράψουμε την υλοποίησή
μας για κάθε μία από αυτές. Περαιτέρω σχολιασμός υπάρχει και στα πηγαία αρχεία (.c) που παραδώσαμε.

Ας ξεκινήσουμε με τις δομές:

typedef struct {
	int global_depth;	// Συνολικό βάθος
	int file_desc;	// Το file descriptor του αρχείου
	int total_rec;   // Συνολικός αριθμός records που χωράνε στο αρχείο σωρού
    	void* last_block; // Δείκτης που δείχνει κάθε φορά στο τελευταίο block
	int size_of_hash_table;
	int* hash_table;
	int count_blocks_for_HT;
	int last_HT_block_id;
	int has_changed;
} HT_info;

Η δομή αυτή ορίζει τα δεδομένα που περιέχει το header block (block 0) του αρχείου. Τα δεδομένα που
αποθηκεύονται στη συγκεκριμένη δομή, έχουν την προφανή λειτουργικότητα. Σημείωση, η μεταβλητή has_changed
μπορεί να έχει τιμή 0 ή 1 (1 όταν έχουμε προσθέσει τουλάχιστον 1 block στο αρχείο και 0 αλλιώς).

typedef struct {
    	int num_of_rec;	// Αριθμός records στο συγκεκριμένο block
	int capacity;   // Πόσα records χωράνε τη συγκεκριμένη στιγμή στο block
	int local_depth;	// Τοπικό βάθος
	int is_block_info;
} HT_block_info;

Η δομή αυτή ορίζει τα δεδομένα που περιέχει η κεφαλίδα ενός κανονικού block εγγραφών. Αυτά είναι
ο αριθμός εγγραφών του, η χωρητικότητά του, το local depth, καθώς και μια μεταβλητή is_block_info
(η is_block_info έχει τιμή 1 αν πρόκειται για μπλοκ εγγραφών και 0 αν πρόκειται για μπλοκ αποθήκευσης
δεδομένων του hash table).

typedef struct {
	int next_ht_block_id;
	int num_of_indices;
} HT_blocks;

Η δομή αυτή ορίζει τα δεδομένα που περιέχει η κεφαλίδα ενός block που χρησιμοποιείται για την
αποθήκευση του hash table. Αυτά είναι ο αριθμός των indices του hash table που περιέχονται στο
συγκεκριμένο block, καθώς και το id του επόμενου block στο οποίο αποθηκεύονται δεδομένα του hash
table.

Πάμε τώρα στις συναρτήσεις:

- HT_ErrorCode HT_Init();

Η συνάρτηση αυτή είναι κενή, καθώς δε χρειάστηκε στην υλοποίησή μας.

- HT_ErrorCode HT_CreateIndex(
	const char *fileName		/* όνομα αρχείου */
	);

Η συνάρτηση αυτή δημιουργεί ένα αρχείο κατακερματισμού με όνομα filename. Επίσης, δεσμεύει μνήμη για
το header block του αρχείου και αρχικοποιεί τα δεδομένα του.

- HT_ErrorCode HT_OpenIndex(
	const char *fileName, 		/* όνομα αρχείου */
  	int *indexDesc            /* θέση στον πίνακα με τα ανοιχτά αρχεία  που επιστρέφεται */
	);

Η συνάρτηση αυτή ανοίγει το αρχείο με όνομα filename. Επίσης, ανακτά τα δεδομένα του hash table,
αν υπάρχουν, αλλιώς τα αρχικοποιεί.

- HT_ErrorCode HT_CloseFile(
	int indexDesc 		/* θέση στον πίνακα με τα ανοιχτά αρχεία */
	);

Η συνάρτηση αυτή κλείναι το αρχείο με δείκτη indexDesc στον πίνακα των ανοιχτών αρχείων. Επίσης,
αντιγράφει τα δεδομένα του hash table στον δίσκο, ώστε την επόμενη φορά που θα ανοίξουμε το αρχείο
να μπορούμε να τα ανακτήσουμε. Τέλος, κάνει unpin το header block και το αποδεσμεύει από τη μνήμη.

- HT_ErrorCode HT_InsertEntry(
	int indexDesc,	/* θέση στον πίνακα με τα ανοιχτά αρχεία */
	Record record	/* δομή που προσδιορίζει την εγγραφή */
	);

Η συνάρτηση αυτή εισάγει την εγγραφή <record> στο αρχείο της θέσης indexDesc των ανοιχτών αρχείων.
Για να πετύχει τον σκοπό της, η Insert χρησιμοποιεί τις δομές που αναφέρθηκαν παραπάνω, καθώς και
κάποιες συναρτήσεις που σχετίζονται με το hash table (θα αναφερθούν παρακάτω).

- void printRecord(Record record);

Η συνάρτηση αυτή εκτυπώνει την εγγραφή <record>.

- HT_ErrorCode HT_PrintAllEntries(
	int indexDesc,	/* θέση στον πίνακα με τα ανοιχτά αρχεία */
	int *id 				/* τιμή του πεδίου κλειδιού προς αναζήτηση */
	);

Η συνάρτηση αυτή εκτυπώνει όλες τις εγγραφές που υπάρχουν στο αρχείο της θέσης indexDesc, αν η τιμή του
id είναι NULL, διαφορετικά σαρώνει το αρχείο για να βρει την εγγραφή με id <*id> και την εκτυπώνει.

- HT_ErrorCode HashStatistics(
	int indexDesc
	);

Η συνάρτηση αυτή εκτυπώνει τα στατιστικά στοιχεία του hash table, για το αρχείο στη θέση indexDesc στον
πίνακα των ανοιχτών αρχείων, που ζητούνται από την εκφώνηση.

Βοηθητικές συναρτήσεις και παραδοχές για το hash table:

- Αρχικά, ως hash function χρησιμοποιήσαμε την FNV-1a που βρήκαμε στο διαδίκτυο*. Την τιμή αυτής της hash
function την μετατρέπουμε σε δυαδικό string. Έπειτα, παίρνουμε τα global_depth δεξιότερα bits του string και
τα μετατρέπουμε σε έναν αριθμό στο δεκαδικό σύστημα αρίθμησης. Αυτό είναι και το τελικό hash value.

*link για την FNV-1a: https://cs.stackexchange.com/questions/60950/hash-multiple-integers-directly-using-fnv-1a

Συναρτήσεις:

- uint32_t hash(char* data, size_t bytes);

Η συνάρτηση αυτή επιστρέφει την τιμή της FNV-1a (σε δεκαδική μορφή) για κάποιο id <data>.

- void print_HashTable(int* hash_table, int hash_array_size);

Η συνάρτηση αυτή εκτυπώνει ένα hash table μεγέθους hash_array_size.

- void save_Hash_table(void* header_inf);

Η συνάρτηση αυτή αποθηκεύει τα δεδομένα του hash table στα blocks του αρχείου.

- void double_hash(void* header_inf);

Η συνάρτηση αυτή διπλασιάζει τις θέσεις του hash table που περιέχεται στο header_inf, αυξάνοντας το global depth
κατά 1.

- int hash_function(int dec, int global_depth);

Η συνάρτηση αυτή παίρνει σαν όρισμα το global depth και ένα id <dec> και επιστρέφει τη θέση του hash table η οποία
αντιστοιχεί στο συγκεκριμένο id.

- void dec2bin_string(unsigned int dec, char* bin_string);

Η συνάρτηση αυτή μετατρέπει έναν δεκαδικό σε binary string.

- int bin_string2dec(char* bin_string);

Η συνάρτηση αυτή μετατρέπει ένα binary string σε δεκαδικό.

Ελπίζουμε να τα καλύψαμε όλα, ευχαριστούμε πολύ για τον χρόνο σας.